{"version":3,"file":"js/alloc-menu.330f64d4.js","mappings":"0JAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,cAAc,CAACF,EAAG,UAAU,CAACA,EAAG,UAAU,CAACG,IAAI,YAAYC,MAAM,CAAC,WAAW,KAAK,KAAON,EAAIO,MAAM,MAAQP,EAAIQ,aAAa,gBAAgB,GAAG,qBAAqB,GAAG,uBAAuBR,EAAIS,aAAaC,GAAG,CAAC,aAAaV,EAAIW,mBAAmBT,EAAG,MAAM,CAACU,YAAY,CAAC,OAAS,SAAS,CAACV,EAAG,YAAY,CAACQ,GAAG,CAAC,MAAQV,EAAIa,UAAU,CAACb,EAAIc,GAAG,QAAQZ,EAAG,YAAY,CAACI,MAAM,CAAC,KAAO,WAAWI,GAAG,CAAC,MAAQV,EAAIe,SAAS,CAACf,EAAIc,GAAG,SAAS,IAAI,IAAI,EAC/gB,EACIE,EAAkB,G,oBCqBtB,GACAC,KAAAA,YACAC,MAAAA,CACAC,OAAAA,CACAC,KAAAA,CAAAA,OAAAA,QACAC,UAAAA,IAGAC,OACA,OACAf,MAAAA,GACAC,aAAAA,CACAe,SAAAA,cACAC,MAAAA,QAEAf,YAAAA,GAEA,EACAgB,UACA,iBACA,oBACA,EACAC,QAAAA,CACA,kBACA,WAAAJ,SAAA,UACA,oBACA,kBAEA,EACA,eACA,WAAAA,SAAA,SACAH,OAAAA,KAAAA,OACAQ,WAAAA,KAAAA,MAAAA,aAAAA,mBAEA,oBACA,+BACA,mBAAAV,KAAAA,SAEA,EACA,sBACA,WAAAK,SAAA,qBACA,mBACA,2BAEA,EAEAM,eAAAA,GAEArB,EAAAA,SAAAA,IACA,cAIA,qBAEA,wCAGA,+CAEA,EACAM,UACA,0CACA,ICtFmQ,I,UCO/PgB,GAAY,OACd,EACA9B,EACAiB,GACA,EACA,KACA,WACA,MAIF,EAAea,EAAiB,O,sNCfzB,MAAMC,EAAmBC,IAAOC,EAAAA,EAAAA,GAAQ,CAAEC,OAAQ,MAAOC,IAAM,iCAAgCH,MAGzFI,EAAsBb,IAASU,EAAAA,EAAAA,GAAQ,CAAEC,OAAQ,OAAQC,IAAK,yBAA0BZ,SAGxFc,EAAc,KAAMJ,EAAAA,EAAAA,GAAQ,CAAEC,OAAQ,MAAOC,IAAK,sBAGlDG,EAAcN,IAAOC,EAAAA,EAAAA,GAAQ,CAAEC,OAAQ,SAAUC,IAAM,cAAaH,MAGpEO,EAAkB,KAAMN,EAAAA,EAAAA,GAAQ,CAAEC,OAAQ,MAAOC,IAAK,+BAGtDK,EAAqBjB,IAASU,EAAAA,EAAAA,GAAQ,CAAEC,OAAQ,OAAQC,IAAK,+BAAgCZ,SAG7FkB,EAAgBrB,IAAWa,EAAAA,EAAAA,GAAQ,CAAEC,OAAQ,MAAOC,IAAM,kCAAiCf,K","sources":["webpack://edu-fed/./src/views/role/alloc-menu.vue","webpack://edu-fed/src/views/role/alloc-menu.vue","webpack://edu-fed/./src/views/role/alloc-menu.vue?efb9","webpack://edu-fed/./src/views/role/alloc-menu.vue?1349","webpack://edu-fed/./src/service/menu.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"alloc-menu\"},[_c('el-card',[_c('el-tree',{ref:\"menu-tree\",attrs:{\"node-key\":\"id\",\"data\":_vm.menus,\"props\":_vm.defaultProps,\"show-checkbox\":\"\",\"default-expand-all\":\"\",\"default-checked-keys\":_vm.checkedKeys},on:{\"node-click\":_vm.handleNodeClick}}),_c('div',{staticStyle:{\"margin\":\"20px\"}},[_c('el-button',{on:{\"click\":_vm.onReset}},[_vm._v(\"清空\")]),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.onSave}},[_vm._v(\"保存\")])],1)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"alloc-menu\">\r\n    <el-card>\r\n      <el-tree\r\n      ref=\"menu-tree\"\r\n      node-key=\"id\"\r\n      :data=\"menus\"\r\n      :props=\"defaultProps\"\r\n      @node-click=\"handleNodeClick\"\r\n      show-checkbox\r\n      default-expand-all\r\n      :default-checked-keys=\"checkedKeys\">\r\n    </el-tree>\r\n    <div style=\"margin: 20px;\">\r\n      <el-button @click=\"onReset\">清空</el-button>\r\n      <el-button type=\"primary\" @click=\"onSave\">保存</el-button>\r\n    </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getMenuNodeList, allocateRoleMenus, getRoleMenus } from '@/service/menu'\r\nexport default {\r\n  name: 'AllocMenu',\r\n  props: {\r\n    roleId: {\r\n      type: [Number, String],\r\n      required: true\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      menus: [],\r\n      defaultProps: {\r\n        children: 'subMenuList',\r\n        label: 'name'\r\n      },\r\n      checkedKeys: []\r\n    }\r\n  },\r\n  created () {\r\n    this.loadMenus()\r\n    this.loadRoleMenus()\r\n  },\r\n  methods: {\r\n    async loadMenus () {\r\n      const { data } = await getMenuNodeList()\r\n      if (data.code === '000000') {\r\n        this.menus = data.data\r\n      }\r\n    },\r\n    async onSave () {\r\n      const { data } = await allocateRoleMenus({\r\n        roleId: this.roleId,\r\n        menuIdList: this.$refs['menu-tree'].getCheckedKeys()\r\n      })\r\n      if (data.code === '000000') {\r\n        this.$message.success('保存成功！')\r\n        this.$router.push({ name: 'role' })\r\n      }\r\n    },\r\n    async loadRoleMenus () {\r\n      const { data } = await getRoleMenus(this.roleId)\r\n      if (data.code === '000000') {\r\n        this.getCheckedKeys(data.data)\r\n      }\r\n    },\r\n    // 数据筛选 （筛选被选中菜单项的 ID）\r\n    getCheckedKeys (menus) {\r\n      // 遍历数据 将所有存在子节点的 node 排除 对子节点列表进行筛选\r\n      menus.forEach(menu => {\r\n        if (!menu.selected) {\r\n          return\r\n        }\r\n        // 检测是否存在子节点\r\n        if (menu.subMenuList) {\r\n          // 对子节点进行选中状态检测\r\n          return this.getCheckedKeys(menu.subMenuList)\r\n        }\r\n        // 说明选中的是叶子节点 并存储 ID\r\n        this.checkedKeys = [...this.checkedKeys, menu.id]\r\n      })\r\n    },\r\n    onReset () {\r\n      this.$refs['menu-tree'].setCheckedKeys([])\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./alloc-menu.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./alloc-menu.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./alloc-menu.vue?vue&type=template&id=4c09d0ce&scoped=true&\"\nimport script from \"./alloc-menu.vue?vue&type=script&lang=js&\"\nexport * from \"./alloc-menu.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4c09d0ce\",\n  null\n  \n)\n\nexport default component.exports","import request from '@/utils/request'\r\n\r\n// 获取编辑页面菜单信息\r\nexport const getEditMenuInfo = (id) => request({ method: 'GET', url: `/boss/menu/getEditMenuInfo?id=${id}` })\r\n\r\n// 添加菜单\r\nexport const createOrUpdateMenu = (data) => request({ method: 'POST', url: 'boss/menu/saveOrUpdate', data })\r\n\r\n// 获取所有菜单\r\nexport const getAllMenus = () => request({ method: 'GET', url: '/boss/menu/getAll' })\r\n\r\n// 删除菜单\r\nexport const deleteMenu = (id) => request({ method: 'DELETE', url: `/boss/menu/${id}` })\r\n\r\n// 获取所有菜单并按层级展示\r\nexport const getMenuNodeList = () => request({ method: 'GET', url: '/boss/menu/getMenuNodeList' })\r\n\r\n// 给角色分配菜单\r\nexport const allocateRoleMenus = (data) => request({ method: 'POST', url: '/boss/menu/allocateRoleMenus', data })\r\n\r\n// 获取角色拥有的菜单列表\r\nexport const getRoleMenus = (roleId) => request({ method: 'GET', url: `/boss/menu/getRoleMenus?roleId=${roleId}` })\r\n"],"names":["render","_vm","this","_c","_self","staticClass","ref","attrs","menus","defaultProps","checkedKeys","on","handleNodeClick","staticStyle","onReset","_v","onSave","staticRenderFns","name","props","roleId","type","required","data","children","label","created","methods","menuIdList","getCheckedKeys","component","getEditMenuInfo","id","request","method","url","createOrUpdateMenu","getAllMenus","deleteMenu","getMenuNodeList","allocateRoleMenus","getRoleMenus"],"sourceRoot":""}